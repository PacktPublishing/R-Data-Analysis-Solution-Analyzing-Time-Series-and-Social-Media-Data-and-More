sys.Date()
Sys.Date()
setwd("E:/R Data Analysis/Section 5/data")
install.packages("rgdal")
library(sp)
library(rgdal)
countries_sp <- readOGR(".", "ne_50m_admin_0_countries")
class(countries_sp)
airports_sp <- readOGR(".", "ne_50m_airports")
class(airports_sp)
library(sp)
library(rgdal)
countries_sp <- readOGR(".", "ne_50m_admin_0_countries")
airports_sp <- readOGR(".", "ne_50m_airports")
# without color
plot(countries_sp)
# with color
plot(countries_sp, col = countries_sp@data$admin)
plot(airports_sp, add=TRUE)
spplot(countries_sp, c("economy"))
spplot(countries_sp, c("pop_est"))
library(maps)
install.packages("maps")
library(maps)
# with country boundaries
map("world")
# without country boundaries
map("world", interior=FALSE)
map("world", fill=TRUE, col=palette(rainbow(7)))
# for most countries, we access the map as a region on the world map
map("world", "tanzania")
# some countries (Italy, France, USA) have dedicated maps that we can directly access by name
map("france")
map("italy")
# with state boundaries
map("state")
# without state boundaries
map("state", interior = FALSE)
# with county boundaries
map("county")
# only state boundary
map("state", "new jersey")
# state with county boundaries
map("county", "new jersey")
library(maps)
# with country boundaries
map("world")
# without country boundaries
map("world", interior=FALSE)
map("world", fill=TRUE, col=palette(rainbow(7)))
# for most countries, we access the map as a region on the world
map("world", "tanzania")
# some countries (Italy, France, USA) have dedicated maps that we can directly access by name
map("france")
map("italy")
# with state boundaries
map("state")
# without state boundaries
map("state", interior = FALSE)
# with county boundaries
map("county")
# only state boundary
map("state", "new jersey")
# state with county boundaries
map("county", "new jersey")
library(sp)
nj <- read.csv("nj-wages.csv")
class(nj)
coordinates(nj) <- c("Long", "Lat")
class(nj)
plot(nj)
nj.lines <-SpatialLines(list(Lines(list(Line(coordinates(nj))),"linenj")))
plot(nj.lines)
install.packages("maptools")
library(maps)
library(maptools) # this also loads the sp package
nj.map <- map("county", "new jersey", fill=TRUE,plot=FALSE)
str(nj.map)
county_names <- sapply(strsplit(nj.map$names, ","),function(x) x[2])
nj.sp <- map2SpatialPolygons(nj.map, IDs = county_names,proj4string = CRS("+proj=longlat +ellps=WGS84"))
class(nj.sp)
nj.dat <- read.csv("nj-county-data.csv")
rownames(nj.dat) <- nj.dat$name
nj.spdf <- SpatialPolygonsDataFrame(nj.sp, nj.dat)
class(nj.spdf)
# plain plot of the object
plot(nj.spdf)
# Plot of population:
spplot(nj.spdf, "population", main = "Population")
spplot(nj.spdf,c("per_capita_income","median_family_income"),main = "Incomes")
library(maps)
library(maptools)
nj.map <- map("county", "new jersey", fill=T, plot=FALSE)
county_names <- sapply(strsplit(nj.map$names, ","),function(x) x[2])
nj.sp <- map2SpatialPolygons(nj.map, IDs = county_names,proj4string = CRS("+proj=longlat +ellps=WGS84"))
nj.dat <- read.csv("nj-county-data.csv")
rownames(nj.dat) <- nj.dat$name
nj.spdf <- SpatialPolygonsDataFrame(nj.sp, nj.dat)
pop_density <-nj.spdf@data$population/nj.spdf@data$area_sq_mi
nj.spdf <- spCbind(nj.spdf, pop_density)
names(nj.spdf@data)
spplot(nj.spdf, "pop_density")
